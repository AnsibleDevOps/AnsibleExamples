---
# defaults file for ansible-kapacitor

# Defines if Kapacitor is configured
kapacitor_config: false

# Enable/Disable the service for overridding configuration via the HTTP API.
kapacitor_config_override:
  enabled: true

# Directory for storing a small amount of metadata about the server.
kapacitor_data_dir: /var/lib/kapacitor

kapacitor_debian_file: "kapacitor_{{ kapacitor_version }}_amd64.deb"

kapacitor_deadman:
  # Configure a deadman's switch
  # Globally configure deadman's switches on all tasks.
  # NOTE: for this to be of use you must also globally configure at least one
  # alerting method.
  global: false
  # Interval, if globally configured the frequency at which to check the throughput.
  interval: 10s
  # Threshold, if globally configured the alert will be triggered if the
  # throughput in points/interval is <= threshold.
  threshold: 0.0

# Default retention-policy, if a write is made to Kapacitor and
# it does not have a retention policy associated with it,
# then the retention policy will be set to this value
kapacitor_default_retention_policy: ""

kapacitor_dl_uri: https://dl.influxdata.com/kapacitor/releases

# Must be resolvable by any configured InfluxDB hosts.
kapacitor_hostname: "{{ ansible_hostname }}"

# HTTP API Server for Kapacitor
# This server is always on, it serves both as a write endpoint and as the API
# endpoint for all other Kapacitor calls.
kapacitor_http:
  bind_address: :9092
  https_certificate: /etc/ssl/kapacitor.pem
  https_enabled: false
  log_enabled: true
  ppof_enabled: false
  write_tracing: false

# Multiple InfluxDB configurations can be defined.
# Exactly one must be marked as the default.
# Each one will be given a name and can be referenced in batch queries and InfluxDBOut nodes.
kapacitor_influxdb:
  - name: localhost
    enabled: true
    default: true
    urls:
      - http://localhost:8086
    username: ""
    password: ""
    timeout: 0
    # Do not verify the TLS/SSL certificate.
    # This is insecure.
    insecure_skip_verify: false
    # Maximum time to try and connect to InfluxDB during startup
    startup_timeout: 5m
    # Turn off all subscriptions
    disable_subscriptions: false
    # Which protocol to use for subscriptions
    # one of 'udp', 'http', or 'https'.
    subscription_protocol: http
    # Subscriptions resync time interval
    # Useful if you want to subscribe to new created databases
    # without restart Kapacitord
    subscriptions_sync_interval: 1m0s
    # Override the global hostname option for this InfluxDB cluster.
    # Useful if the InfluxDB cluster is in a separate network and
    # needs special config to connect back to this Kapacitor instance.
    # Defaults to `hostname` if empty.
    kapacitor_hostname: ""
    # Override the global http port option for this InfluxDB cluster.
    # Useful if the InfluxDB cluster is in a separate network and
    # needs special config to connect back to this Kapacitor instance.
    # Defaults to the port from `[http] bind-address` if 0.
    http_port: 0
    # Host part of a bind address for UDP listeners.
    # For example if a UDP listener is using port 1234
    # and `udp-bind = "hostname_or_ip"`,
    # then the UDP port will be bound to `hostname_or_ip:1234`
    # The default empty value will bind to all addresses.
    udp_bind: ""
    # Subscriptions use the UDP network protocl.
    # The following options of for the created UDP listeners for each subscription.
    # Number of packets to buffer when reading packets off the socket.
    udp_buffer: 1000
    # The size in bytes of the OS read buffer for the UDP socket.
    # A value of 0 indicates use the OS default.
    udp_read_buffer: 0

kapacitor_logging:
  # Destination for logs
  # Can be a path to a file or 'STDOUT', 'STDERR'.
  file: /var/log/kapacitor/kapacitor.log
  # Logging level can be one of:
  # DEBUG, INFO, WARN, ERROR, or OFF
  level: INFO

kapacitor_redhat_file: "kapacitor-{{ kapacitor_version }}.x86_64.rpm"

kapacitor_replay:
  # Where to store replay files, aka recordings.
  dir: /var/lib/kapacitor/replay

# Send usage statistics
# every 12 hours to Enterprise.
kapacitor_reporting:
  enabled: true
  url: https://usage.influxdata.com

# Do not apply configuration overrides during startup.
# Useful if the configuration overrides cause Kapacitor to fail startup.
# This option is intended as a safe guard and should not be needed in practice.
kapacitor_skip_config_overrides: false

kapacitor_smtp:
  # Configure an SMTP email server
  # Will use TLS and authentication if possible
  # Only necessary for sending emails from alerts.
  enabled: false
  host: localhost
  port: 25
  username: ""
  password: ""
  # From address for outgoing mail
  from: ""
  # List of default To addresses.
  to:
    - oncall@example.com
  # Skip TLS certificate verify when connecting to SMTP server
  no_verify: false
  # Close idle connections after timeout
  idle_timeout: 30s
  # If true the all alerts will be sent via Email
  # without explicitly marking them in the TICKscript.
  global: false
  # Only applies if global is true.
  # Sets all alerts in state-changes-only mode,
  # meaning alerts will only be sent if the alert state changes.
  state_changes_only: false

kapacitor_stats:
  # Emit internal statistics about Kapacitor.
  # To consume these stats create a stream task
  # that selects data from the configured database
  # and retention policy.
  #
  # Example:
  #  stream|from().database('_kapacitor').retentionPolicy('autogen')...
  #
  enabled: true
  stats_interval: 10s
  database: _kapacitor
  retention_policy: autogen

kapacitor_storage:
  # Where to store the Kapacitor boltdb database
  boltdb: /var/lib/kapacitor/kapacitor.db

kapacitor_task:
  # Where to store the tasks database
  # DEPRECATED: This option is not needed for new installations.
  # It is only used to determine the location of the task.db file
  # for migrating to the new `storage` service.
  dir: /var/lib/kapacitor/tasks
  # How often to snapshot running task state.
  snapshot_interval: 60s

kapacitor_version: 1.4.0
